"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[36584],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},14499:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(87462),o=(a(67294),a(3905));const i={},r="Introduction to Authentication & Authorization",s={unversionedId:"reference/db/authorization/introduction",id:"version-0.9.2/reference/db/authorization/introduction",title:"Introduction to Authentication & Authorization",description:"Authorization in Platformatic DB is role-based (see Roles And User Information for further details).",source:"@site/versioned_docs/version-0.9.2/reference/db/authorization/introduction.md",sourceDirName:"reference/db/authorization",slug:"/reference/db/authorization/introduction",permalink:"/docs/0.9.2/reference/db/authorization/introduction",draft:!1,tags:[],version:"0.9.2",frontMatter:{},sidebar:"docs",previous:{title:"Migrations",permalink:"/docs/0.9.2/reference/db/migrations"},next:{title:"Programmatic Rules",permalink:"/docs/0.9.2/reference/db/authorization/programmatic-rules"}},l={},p=[{value:"JWT",id:"jwt",level:2},{value:"JWKS",id:"jwks",level:3},{value:"JWT Custom Claim Namespace",id:"jwt-custom-claim-namespace",level:3},{value:"Webhook",id:"webhook",level:2},{value:"JWT and Webhook",id:"jwt-and-webhook",level:2},{value:"HTTP Headers",id:"http-headers",level:2},{value:"User Impersonation",id:"user-impersonation",level:3},{value:"User Metadata",id:"user-metadata",level:2},{value:"Events and Subscriptions",id:"events-and-subscriptions",level:2},{value:"Programmatically skip authorization rules",id:"programmatically-skip-authorization-rules",level:2}],c={toc:p};function u(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction-to-authentication--authorization"},"Introduction to Authentication & Authorization"),(0,o.kt)("p",null,"Authorization in Platformatic DB is ",(0,o.kt)("strong",{parentName:"p"},"role-based")," (see ",(0,o.kt)("a",{parentName:"p",href:"#roles-and-user-information"},"Roles And User Information")," for further details).\nA user is supposed to have a list of roles associated.\nPlatformatic delegates authentication and assignment of the ",(0,o.kt)("inlineCode",{parentName:"p"},"roles")," to an external ",(0,o.kt)("em",{parentName:"p"},"authentication service"),".\nThe job of the authentication service is to authenticate users and assign their roles correctly.\nSupported authentication service integrations are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"JWT"),(0,o.kt)("li",{parentName:"ul"},"Webhook")),(0,o.kt)("p",null,"We refer to the user roles and other informations (like ",(0,o.kt)("inlineCode",{parentName:"p"},"userId"),") as ",(0,o.kt)("a",{parentName:"p",href:"#user-metadata"},"User Metadata"),"."),(0,o.kt)("p",null,"To make testing and developing easier, it's possible to bypass these checks if a ",(0,o.kt)("inlineCode",{parentName:"p"},"adminSecret")," is set. See ",(0,o.kt)("a",{parentName:"p",href:"#http-headers"},"HTTP Headers"),"."),(0,o.kt)("h2",{id:"jwt"},"JWT"),(0,o.kt)("p",null,"JWT is built on top of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-jwt"},"fastify-jwt"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Platformatic DB JWT integration",src:a(14526).Z,width:"513",height:"274"})),(0,o.kt)("p",null,"To configure it, the quickest way is to pass a shared ",(0,o.kt)("inlineCode",{parentName:"p"},"secret"),", e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'  "authorization": {\n    ...\n\n    "jwt": {\n      "secret": "<shared-secret>"\n    },\n\n    ...\n  }\n')),(0,o.kt)("p",null,"For more complex configurations, please check ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-jwt#options"},"fastify-jwt options"),"."),(0,o.kt)("h3",{id:"jwks"},"JWKS"),(0,o.kt)("p",null,"Platformatic DB supports ",(0,o.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7517"},"JWKS"),". To configure it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'  ...\n  "authorization": {\n    "jwt": {\n      "jwks": {\n        "allowedDomains": [\n          "https://ISSUER_DOMAIN"\n        ]\n      }\n    },\n  }\n  ...\n')),(0,o.kt)("p",null,"More ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nearform/get-jwks#options"},"get-jwks options")," can be specified."),(0,o.kt)("p",null,"When a JWT token is received, Platformatic DB gets the correct public key from ",(0,o.kt)("inlineCode",{parentName:"p"},"https:/ISSUER_DOMAIN/.well-known/jwks.json")," and uses it to verify the JWT signature. The token carries all the informations, like the ",(0,o.kt)("inlineCode",{parentName:"p"},"kid"),", which is the key id used to sign the token itself, so no other configurations are strictly necessary."),(0,o.kt)("p",null,"It's also possible to enable ",(0,o.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7517"},"JWKS")," with no options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'  ...\n\n  "authorization": {\n    "jwt": {\n      "jwks": true\n      }\n    },\n  }\n  ...\n')),(0,o.kt)("p",null,"In this case, the JWKS URL is calculated from the ",(0,o.kt)("inlineCode",{parentName:"p"},"iss")," (issuer) field of JWT, so every JWT token from an issuer that exposes a valid JWKS token will pass the validation. For that reason, ",(0,o.kt)("strong",{parentName:"p"},"this configuration should be used only for development"),", while in every other case the ",(0,o.kt)("inlineCode",{parentName:"p"},"allowedDomains")," should be specified."),(0,o.kt)("h3",{id:"jwt-custom-claim-namespace"},"JWT Custom Claim Namespace"),(0,o.kt)("p",null,"JWT claims can be namespaced to avoid name collisions. If so, we will receive tokens with custom claims such as: ",(0,o.kt)("inlineCode",{parentName:"p"},"https://platformatic.dev/X-PLATFORMATIC-ROLE")," (where `",(0,o.kt)("a",{parentName:"p",href:"https://platformatic.cloud/"},"https://platformatic.cloud/")," is the namespace).\nIf we want to map these claims to user metadata removing our namespace, we can specify the namespace in the JWT options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'  ...\n\n  "authorization": {\n    "jwt": {\n      "namespace": "https://platformatic.dev/"\n      }\n    },\n  }\n\n  ...\n')),(0,o.kt)("p",null,"With this configuration, the ",(0,o.kt)("inlineCode",{parentName:"p"},"https://platformatic.dev/X-PLATFORMATIC-ROLE")," claim is mapped to ",(0,o.kt)("inlineCode",{parentName:"p"},"X-PLATFORMATIC-ROLE")," user metadata."),(0,o.kt)("h2",{id:"webhook"},"Webhook"),(0,o.kt)("p",null,"Platformatic can use a webhook to authenticate the requests."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Platformatic DB Webhook integration",src:a(5006).Z,width:"606",height:"324"})),(0,o.kt)("p",null,"In this case, the URL is configured on authorization:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'  "authorization": {\n    ...\n\n    "webhook": {\n      "url": "<webhook url>"\n    },\n\n    ...\n  }\n')),(0,o.kt)("p",null,"When a request is received, Platformatic sends a ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," to the webhook, replicating the same body and headers, except for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"host")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"connection"))),(0,o.kt)("p",null,"In the Webhook case, the HTTP response contains the roles/user information as HTTP headers."),(0,o.kt)("h2",{id:"jwt-and-webhook"},"JWT and Webhook"),(0,o.kt)("p",null,"It's possible to configure the server to first try to validate a JWT token and if that is not found,\nforward the request to the webhook."),(0,o.kt)("h2",{id:"http-headers"},"HTTP Headers"),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Note that using admin API key on HTTP headers is highly insecure and should be used only within protected networks.")))),(0,o.kt)("p",null,"If a request has ",(0,o.kt)("inlineCode",{parentName:"p"},"X-PLATFORMATIC-ADMIN-SECRET")," HTTP header set with a valid ",(0,o.kt)("inlineCode",{parentName:"p"},"adminSecret")," (see ",(0,o.kt)("a",{parentName:"p",href:"/docs/0.9.2/reference/db/configuration#authorization"},"configuration reference"),"]) the role is set automatically as ",(0,o.kt)("inlineCode",{parentName:"p"},"platformatic-admin"),", unless a different role is set for user impersonation (which is disabled if JWT or Webhook are set, see ",(0,o.kt)("a",{parentName:"p",href:"#user-impersonation"},"below"),"). "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Platformatic DB HTTP Headers",src:a(85082).Z,width:"472",height:"310"})),(0,o.kt)("p",null,"Also, the following rule is automatically added to every entity, allowing the user that presented the ",(0,o.kt)("inlineCode",{parentName:"p"},"adminSecret")," to perform any operation on any entity:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "role": "platformatic-admin",\n      "find": false,\n      "delete": false,\n      "save": false\n    }\n')),(0,o.kt)("h3",{id:"user-impersonation"},"User Impersonation"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"When JWT or Webhook are set, user impersonation is not enabled, and the role is always set as ",(0,o.kt)("inlineCode",{parentName:"p"},"platfomatic-admin")," automatically.")),(0,o.kt)("p",null,"If a user presents a valid ",(0,o.kt)("inlineCode",{parentName:"p"},"X-PLATFORMATIC-ADMIN-SECRET"),", can also ",(0,o.kt)("strong",{parentName:"p"},"impersonate users")," with different roles.\nThe roles to impersonate can be specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"X-PLATFORMATIC-ROLE")," containing a comma separated list of roles."),(0,o.kt)("h2",{id:"user-metadata"},"User Metadata"),(0,o.kt)("p",null,"In all cases, the roles/user information is passed to Platformatic from the external ",(0,o.kt)("em",{parentName:"p"},"authentication service")," as a string (JWT claims or HTTP headers).\nWe can refer to these as ",(0,o.kt)("strong",{parentName:"p"},"user metadata"),". Platformatic saves the user metadata for each request in a ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," object.\nRoles can be set using ",(0,o.kt)("inlineCode",{parentName:"p"},"X-PLATFORMATIC-ROLE")," as list of comma-separated roles (this key is ",(0,o.kt)("a",{parentName:"p",href:"/docs/0.9.2/reference/db/configuration#role-and-anonymous-keys"},"configurable"),")."),(0,o.kt)("p",null,'Note that roles are just strings. Some "special roles" are reserved:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"platformatic-admin")," : this identifies a user who has admin powers"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"anonymous"),": set automatically when no roles are associated")),(0,o.kt)("h2",{id:"events-and-subscriptions"},"Events and Subscriptions"),(0,o.kt)("p",null,"Platformatic DB supports GraphQL subscriptions and therefore db-authorization must protect them.\nThe check is performed based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," permissions, the only permissions that are supported are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"find: false"),", the subscription for that role is disabled"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"find: { checks: { [prop]: 'X-PLATFORMATIC-PROP' } }")," validates that the given prop is equal"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"find: { checks: { [prop]: { eq: 'X-PLATFORMATIC-PROP' } } }")," validates that the given prop is equal")),(0,o.kt)("p",null,"Conflicting rules across roles for different equality checks will not be supported."),(0,o.kt)("h2",{id:"programmatically-skip-authorization-rules"},"Programmatically skip authorization rules"),(0,o.kt)("p",null,"In custom plugins, it's possible to skip the authorization rules on entities programmatically by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"skipAuth")," flag to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or not passing a ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx"),", e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    // this works even if the user's role doesn't have the `find` permission. \n    const res = await app.platformatic.entities.page.find({skipAuth: true, ...})\n")),(0,o.kt)("p",null,"This has the same effect:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    // this works even if the user's role doesn't have the `find` permission\n    const res = await app.platformatic.entities.page.find() // no ctx\n")),(0,o.kt)("p",null,"This is useful for custom plugins for which the authentication is not necessary, so there is no user role set when invoked."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Skip authorization rules is not possible on the automatically generated REST and GraphQL APIs. ")))}u.isMDXComponent=!0},85082:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/http-16e850f4929a4d5c21a629cbe609b67e.png"},14526:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/jwt-f72781533567349fb71fc37b9768e847.png"},5006:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/webhook-35d01c3e23ac75c26c9d519daa16cf1b.png"}}]);